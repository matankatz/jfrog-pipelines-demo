resources:
  - name: go_gitRepo_demo
    type: GitRepo
    configuration:
      path: ranjithrs/swampup-go-service
      gitProvider: ranjithr_github

  - name: svc_build_info_demo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: svc_build
      buildNumber: 1

  - name: svc_promoted_build_info_demo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: svc_build
      buildNumber: 1

  - name: backend_gitRepo_demo
    type: GitRepo
    configuration:
      path: ranjithrs/swampup-java-backend-service
      gitProvider: ranjithr_github

  - name: app_build_info_demo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: backend_build
      buildNumber: 1

  - name: app_promoted_build_info_demo
    type: BuildInfo
    configuration:
      sourceArtifactory: art
      buildName: backend_build
      buildNumber: 1

  - name: frontend_gitRepo_demo
    type: GitRepo
    configuration:
      path: ranjithrs/swampup-vue-frontend
      gitProvider: ranjithr_github

  - name: releaseBundle_demo
    type: ReleaseBundle
    configuration:
      sourceDistribution: art
      name: demo-app
      version: v2.0.0

  - name: signedBundle_demo
    type: ReleaseBundle
    configuration:
      sourceDistribution: art
      name: demo-app
      version: v2.0.0

  - name: distributionRules_demo
    type: DistributionRule
    configuration:
      sourceArtifactory: art
      serviceName: "*"
      siteName: "*"
      cityName: "*"
      countryCodes:
        - "*"

  - name: deploy_vm_demo
    type: VmCluster
    configuration:
      sshKey: deploy_ssh
      targets:
        - 35.236.12.2

pipelines:
  - name: demo_service_demo
    steps:
      - name: bld_svc_demo
        type: DockerBuild
        configuration:
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: artifactory-swampup.jfrogdev.co/docker-local/gosvc
          dockerImageTag: $run_number
          inputResources:
            - name: go_gitRepo_demo
          integrations:
            - name: art

      - name: push_svc_demo
        type: PushArtifactoryPackage
        configuration:
          targetRepo: docker-local
          integrations:
            - name: art
          inputSteps:
            - name: bld_svc_demo

      - name: publish_svc_build_demo
        type: PublishBuildInfo
        configuration:
          integrations:
            - name: art
          inputSteps:
            - name: push_svc_demo
          outputResources:
            - name: svc_build_info_demo

      - name: promote_svc_build_demo
        type: PromoteBuild
        configuration:
          targetRepo: demo
          integrations:
            - name: art
          inputResources:
            - name: svc_build_info_demo
          outputResources:
            - name: svc_promoted_build_info_demo

  - name: demo_app_pipeline
    steps:
      - name: bld_backend_demo
        type: MvnBuild
        configuration:
          runtime:
            type: image
            image:
              custom:
                name: drydock/u18java
                tag: master
          sourceLocation: .
          mvnCommand: clean install -ntp
          configFileLocation: .
          configFileName: mvn-art-config
          inputResources:
            - name: backend_gitRepo_demo
          integrations:
            - name: art


      - name: bld_frontend
        type: NpmBuild
        configuration:
          npmArgs: --no-progress --no-audit
          sourceLocation: .
          repositoryName: npm-dev-virtual
          inputResources:
            - name: frontend_gitRepo_demo
          integrations:
            - name: art

      - name: pack_frontend
        type: Bash
        configuration:
          inputSteps:
            - name: bld_frontend
          integrations:
            - name: art
        execution:
          onStart:
            - export tempStateLocation="$step_tmp_dir/npmSourceState"
            - restore_run_state npmBuildInputGitRepo $tempStateLocation
            - pushd $tempStateLocation
            - npm run build
            - save_run_state $tempStateLocation/. npmBuildInputGitRepo

      - name: publish_frontend_demo
        type: NpmPublish
        configuration:
          repositoryName: npm-libs-local
          inputSteps:
            - name: pack_frontend
          integrations:
            - name: art
        execution:
          onStart:
            - export inputNpmBuildStepName="bld_frontend"

      - name: build_app_demo
        type: Bash
        configuration:
          environmentVariables:
            dockerImageName: artifactory-swampup.jfrogdev.co/docker-local/app
            dockerImageTag: ${run_number}
          inputResources:
            - name: backend_gitRepo_demo
          inputSteps:
            - name: bld_backend_demo
            - name: publish_frontend_demo
          integrations:
            - name: art
        execution:
          onStart:
            - rm -rf $run_dir/workspace/jfrog
            - retry_command jfrog rt config --url $int_art_url --user $int_art_user --apikey $int_art_apikey --interactive=false
            - pushd $res_backend_gitRepo_demo_resourcePath
            - echo $int_art_url
            - echo $run_Number
            - add_run_variable buildStepName=${step_name}
            - add_run_variable ${step_name}_buildNumber=${run_number}
            - add_run_variable ${step_name}_buildName=${pipeline_name}
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_art_url} .
            - jfrog rt bce $pipeline_name $run_number
            - jfrog rt docker-push $dockerImageName:$dockerImageTag docker-local --build-name=$pipeline_name --build-number=$run_number
            - save_run_state /tmp/jfrog/. jfrog

      - name: publish_app_build_demo
        type: PublishBuildInfo
        configuration:
          integrations:
            - name: art
          inputSteps:
            - name: build_app_demo
          outputResources:
            - name: app_build_info_demo

      - name: promote_app_build
        type: PromoteBuild
        configuration:
          targetRepo: demo
          integrations:
            - name: art
          inputResources:
            - name: app_build_info_demo
          outputResources:
            - name: app_promoted_build_info_demo

  - name: demo_release_pipeline
    steps:
      - name: bundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: demo-app
          releaseBundleVersion: v2.0.$run_number
          dryRun: false
          sign: false
          description: "some random test description"
          integrations:
            - name: art
          inputResources:
            - name: svc_promoted_build_info_demo
              trigger: false
            - name: app_promoted_build_info_demo
              trigger: false
          outputResources:
            - name: releaseBundle_demo

      - name: sign_demo
        type: SignReleaseBundle
        configuration:
          integrations:
            - name: art
          inputResources:
            - name: releaseBundle_demo
          outputResources:
            - name: signedBundle_demo

      - name: distribute
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: signedBundle_demo
            - name: distributionRules_demo
          integrations:
            - name: art

      - name: deploy
        type: Bash
        configuration:
          environmentVariables:
            docker_repository: demo
            artifactory_address: 35.227.181.186
          integrations:
            - name: edge_art
          inputResources:
            - name: deploy_vm_demo
            - name: svc_promoted_build_info_demo
              trigger: false
            - name: app_promoted_build_info_demo
              trigger: false
          inputSteps:
            - name: distribute
        execution:
          onExecute:
            - ssh -i ~/.ssh/deploy_vm_demo eladh@${res_deploy_vm_demo_targets_0} sudo /home/eladh/deploy-to-prod-test.sh $artifactory_address $docker_repository $int_edge_art_apikey $res_app_promoted_build_info_demo_buildNumber $res_svc_promoted_build_info_demo_buildNumber
